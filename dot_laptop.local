#!/bin/sh

set -e

fancy_echo "Running your customizations from ~/.laptop.local ..."

if [ -f "$HOME/Brewfile.local" ]; then
  fancy_echo "Installing tools and apps from Brewfile.local ..."
  if brew bundle --file="$HOME/Brewfile.local"; then
    fancy_echo "All items in Brewfile.local were installed successfully."
  else
    fancy_echo "Some items in Brewfile.local were not installed successfully."
  fi
fi

fancy_echo "Fetching and applying dotfiles with chezmoi ..."
chezmoi init --apply --verbose https://github.com/monfresh/dotfiles.git

fancy_echo "Updating shell file to work with nodenv ..."
if [[ $SHELL == *fish ]]; then
  append_to_file "$shell_file" 'status --is-interactive; and source (nodenv init -|psub)'
else
  append_to_file "$shell_file" 'eval "$(nodenv init -)"'
fi

fancy_echo "Installing node for ohana-web-search ..."
if nodenv versions | grep 8.17.0; then
  fancy_echo "node 8.17.0 already installed."
else
  nodenv install 8.17.0
fi

if command -v prettier >/dev/null; then
  fancy_echo "Prettier is already installed. Skipping ..."
else
  fancy_echo "Installing prettier globally ..."
  yarn global add prettier
fi

if brew list -1 --formula | grep -Fqx node; then
  fancy_echo "Uninstalling node from brew because we use nodenv."
  fancy_echo "(yarn, which we want, automatically installs node)"
  brew uninstall --ignore-dependencies node
fi

fancy_echo "Cloning GitHub repos ..."
gh auth login --with-token < ~/.github_token.txt

if [ ! -d "$HOME/projects" ]; then
  mkdir "$HOME/projects"
fi

if [ ! -d "$HOME/projects/codeforamerica" ]; then
  mkdir "$HOME/projects/codeforamerica"
fi

cd ~/projects/codeforamerica
gh repo clone codeforamerica/ohana-api || true

gh repo clone codeforamerica/ohana-web-search || true

if [ ! -d "$HOME/projects/monfresh" ]; then
  mkdir "$HOME/projects/monfresh"
fi

cd ~/projects/monfresh

gh repo clone monfresh/laptop || true
gh repo clone monfresh/install-ruby-on-macos || true
gh repo clone monfresh/blog || true
gh repo clone monfresh/monfresh-dot-com || true
gh repo clone monfresh/ohana-sms || true

# mkdir ~/projects/smcgov
# cd ~/projects/smcgov
# gh repo clone smcgov/ohana-api-smc
# gh repo clone smcgov/SMC-Connect
# gh repo clone smcgov/ohana-sms-smc

if [ -f "$HOME/.laptop.macos" ]; then
  # shellcheck source=/dev/null
  . "$HOME/.laptop.macos"
fi

fancy_echo "Setting app preferences ..."

# Disable autocorrect in bear app (can't find prefs file)

fancy_echo "Allowing quicklook plugins ..."
xattr -d -r com.apple.quarantine ~/Library/QuickLook
fancy_echo "Restarting the finder ..."
killall Finder

# Add fish to /etc/shells and change to fish
if ! grep -qs "fish" /etc/shells; then
 fancy_echo "Adding fish to /etc/shells ..."
 echo "/usr/local/bin/fish" | sudo tee -a /etc/shells
 chsh -s /usr/local/bin/fish
fi

if [ ! -d "$HOME/.local/share/omf" ]; then
  fancy_echo "installing omf ..."
  cd ~/projects
  git clone https://github.com/oh-my-fish/oh-my-fish
  cd oh-my-fish
  bin/install --offline
fi

fancy_echo "Now that the script is done, follow these manual steps ..."
fancy_echo "First, setup Dropbox, and wait for it to sync everything."

# https://packagecontrol.io/docs/syncing
fancy_echo "To sync Sublime Text 3 settings with Dropbox:"
fancy_echo "Open Sublime Text to populate Application Support"
fancy_echo "Then run:"
fancy_echo "cd ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/"
fancy_echo "rm -r User"
fancy_echo "ln -s ~/Dropbox/Sublime/User"

# https://manytricks.com/osticket/kb/faq.php?id=53
fancy_echo "To set up Moom prefs, run:"
fancy_echo "defaults import com.manytricks.Moom ~/Dropbox/Moom/Moom.plist"

# https://wiki.keyboardmaestro.com/Syncing_Macros_Between_Macs
fancy_echo "To import Keyboard Maestro macros:"
fancy_echo "Select File->Start Syncing, select Open Existing, read the dialog, "
fancy_echo "then select the sync file in ~/Dropbox/Keyboard Maestro, then import unique macros if any."

# https://github.com/trailofbits/algo#adding-or-removing-users
# https://github.com/trailofbits/algo#apple-devices
fancy_echo "To add Algo profiles:"
fancy_echo "1. On the source Mac, update the 'users' list in 'config.cfg'"
fancy_echo "2. 'cd' to the algo directory, and 'source .env/bin/activate'"
fancy_echo "3. Run './algo update-users'"
fancy_echo "4. Put the new profile in Dropbox"
fancy_echo "5. On the target Mac, open WireGuard, click on it in the menu bar and open the profile via 'Import tunnel from file'."

# https://devcenter.heroku.com/articles/git#http-git-authentication
fancy_echo "To setup Heroku auth, run 'heroku login'."
fancy_echo "This will automatically create a token in ~/.netrc"

# https://iterm2.com/documentation-preferences-general.html
fancy_echo "To sync iTerm prefs:"
fancy_echo "1. On the source Mac, create a folder in Dropbox to store the prefs."
fancy_echo "2. Go to Preferences->General->Preferences."
fancy_echo "3. Check 'Load preferences from a custom folder or URL'"
fancy_echo "4. Click Browse and select the Dropbox folder."
fancy_echo "5. Click Save Current Settings to Folder"
fancy_echo "6. On one Mac only, check 'Save changes to folder when iTerm2 quits'."
fancy_echo "7. On the target Mac, repeat steps 2-4"

fancy_echo "Other things to do:"
fancy_echo "* Turn on FileVault *"
fancy_echo "* Setup the printer via system prefs *."
fancy_echo "It should automatically find it in the network."
